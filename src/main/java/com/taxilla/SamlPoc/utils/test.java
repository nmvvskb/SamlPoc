package com.taxilla.SamlPoc.utils;

import org.apache.commons.io.FileUtils;
import org.springframework.web.client.RestTemplate;
import org.apache.tomcat.util.codec.binary.Base64;
import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;

public class test {
    public static void main(String ar[]) throws IOException {

//        File metaData =  new File("./src/main/resources/saml/metadata/okta.xml");
//        byte[] metaContent = FileUtils.readFileToByteArray(metaData);
//        Base64 base64 = new Base64();
//        byte[] base64EncodeByteArray = base64.encode(metaContent);
//        String base64EncodedMessage = new String(base64EncodeByteArray);
//
//        System.out.println("base64EncodedMessage : " + base64EncodedMessage);
//        String endPointUrl = "https://taxilla4.okta.com/app/taxilla4_samplesamlwithspringandocta_1/exk75btfXVhh0TSqe695/sso/saml?SAMLRequest="+base64EncodedMessage;
//
//
////        String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage,"UTF-8");
////        System.out.println("urlEncodedMessage : " + urlEncodedMessage);
//
//        byte[] decode = base64.decode("");
//        System.out.println("decode " + new String(decode));
    }
}
